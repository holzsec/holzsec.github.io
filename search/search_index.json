{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"docs/","text":"holzsec About Publications Research","title":"holzsec"},{"location":"docs/#holzsec","text":"","title":"holzsec"},{"location":"docs/#about","text":"","title":"About"},{"location":"docs/#publications","text":"","title":"Publications"},{"location":"docs/#research","text":"","title":"Research"},{"location":"docs/emailstandards/","text":"Email Security Standards 1. SPF SPF was first defined in RFC4408 [@RFC4408] and updated in RFC7208 [@RFC7208]. It enables restriction of sending hosts by listing IPs, IP ranges, or domain names. SPF is a TXT record that begins with a version field ( v=spf1 ) and can include multiple directives. A directive includes an optional qualifier ( + , - , ? , `) and a mechanism ( all , include , a , mx , ptr , ip4 , ip6 , exists`). Mechanisms are evaluated from left to right and can result in a match, no match, or exception. A match returns the qualifier: + : Pass - : Fail ``: Softfail ? : Neutral If no match is found, the next mechanism is evaluated. Some mechanisms cause DNS lookups ( include , a , mx , ptr , exists ). The maximum number of DNS lookups is limited to 10. The check function should be limited in time but should allow at least 20 seconds. Exceeding the limit should result in a temperror . If no mechanism matches, the check should return \"neutral,\" which is the same as the ?all mechanism at the end. If no SPF record is found, it returns \"None,\" and a permanent error (permerror) occurs for syntax errors. Finally, it is recommended to stay within the legacy max length for DNS requests of 512 octets. 2. DKIM DKIM - DomainKeys Identified Mail was introduced in RFC4871 [@RFC4871] and updated in RFC6376 [@RFC6376]. DKIM signatures are used to sign the email header and body. It provides authenticity for the email sender and ensures that data was not modified during transit. Sending mail providers publish a TXT record of a specific format. Selectors allow multiple DKIM entries for a single domain. The receiver can verify the signature using the selector to request the associated DKIM DNS entry. The format of a DKIM signature is a tag list. Important tags are: v : Version field (currently 1) a : Signing algorithm (RFC6376 mentions SHA1 and SHA256) b : Signature data bh : Body hash d : Domain s : Selector Optional tags include: c : Canonicalization (either \"simple\" or \"relaxed\") Default is \"simple,\" which allows no modification in transit \"Relaxed\" header allows lowercase conversion of header field names and whitespace adjustments \"Relaxed\" body allows removing whitespaces at the end of lines and ignoring empty lines t : Signature timestamp (number of seconds from Jan 1, 1970 UTC) x : Signature expiration time i : Sender email address z : List of original message headers The DKIM DNS entry includes three tags: v : Version field k : Algorithm p : Public key With the right selector, the public key can be retrieved, enabling signature verification. 3. DMARC DMARC [@RFC7489] - Domain-based Message Authentication, Reporting, and Conformance matches the From header to an authenticated domain via SPF (MAIL FROM) or DKIM ( d= ). DMARC entries are of type TXT and have a specific format. An example DMARC entry might look like this: The first two tags are required, and others are optional: Required: v= : Version field (currently DMARC1) p= : Policy to apply in case of a mismatch (none: no action, quarantine: mark as spam, reject: reject mail during the SMTP transaction) Optional: pct= : Percentage of emails to which the policy should be applied (default 100%) adkim= : Strict/relaxed domain match for DKIM aspf= : Strict/relaxed domain match for SPF fo : Failure report options ( $<\"0\"/\"1\"/\"d\"/\"s\">$ ) rf= : Format for failure reports (default \"afrf\") ri= : Interval between aggregated reports (default 86400s = 24h) rua= : Email address for sending aggregated reports ruf= : Address for sending message-specific failure information sp= : Set a different policy (p tag options) for subdomains 6. DANE DANE @RFC6698 - DNS-Based Authentication of Named Entities allows stating valid certificates for a domain via DNS records. This replaces the necessity for CAs as trusted third parties for TLS. Authentication of named entities is realized via TLSA records. In order to trust and guarantee the authenticity of TLSA records (to prevent MITM and DNS cache poisoning scenarios), it requires using DNSSEC-capable resolvers. To support multiple certificates for multiple applications under one domain, TLSA records follow a specific format. The numbers before the certificate association data field specify how to handle the data, what data it includes, and how it is presented. $<0-3>$ Certificate Usage provides four options on how to handle the certificate-association-data to verify the TLS server certificate: 0) Specifies CA cert., valid trust chain required ( CA constraint ) Certificate represents end-entity cert., valid trust chain required ( service cert. constraint ) Specifies CA cert., no valid trust chain required ( trust anchor assertion ) Specifies end-entity cert., no valid trust chain required ( domain-issued cert. ) $<0-1>$ TLSA Selectors specify what information is included in the certificate data: 0) Whole certificate is hashed, certificate association data has to be updated for each certificate renewal Only SubjectPublicKeyInfo is hashed, no update required if the same private key is used $<0-2>$ TLSA Matching Types specify the representation type of certificate-association-data: 0) Raw data SHA-256 hash SHA-512 hash 7. DNSSEC (First introduced in 1999 with RFC2535 [@RFC2535], reworked in 2005 with RFC4033) - Provides authenticity for DNS records. Authenticity is realized by signing DNS entries. DNS entries of the same type are grouped into Resource Record Sets (RRsets). Each zone uses a private zone signing key (ZSK) to sign RRsets and publishes them as RRSIG entries. A resolver can verify the signature using the public ZSK stored in a DNSKEY DNS entry. Another layer of signing keys is introduced: key signing keys (KSK) are used to sign ZSK. Verification again uses a DNSKEY entry that contains the public KSK. From a security perspective, the KSK is like the key to your front door, while the ZSK is used for your inner doors. By using two keys, the ZSK can be changed more easily, with shorter key lengths, reducing the size of DNS responses and verification time. The next step is to provide a Delegation-Signer (DS) record, a signed hash of the KSK in the parent zone, to establish a chain of trust. This step is repeated for each domain level until the root zone is reached. Changing the KSK requires updating the entries in the parent zones.","title":"Email Security Standards"},{"location":"docs/emailstandards/#email-security-standards","text":"","title":"Email Security Standards"},{"location":"docs/emailstandards/#1-spf","text":"SPF was first defined in RFC4408 [@RFC4408] and updated in RFC7208 [@RFC7208]. It enables restriction of sending hosts by listing IPs, IP ranges, or domain names. SPF is a TXT record that begins with a version field ( v=spf1 ) and can include multiple directives. A directive includes an optional qualifier ( + , - , ? , `) and a mechanism ( all , include , a , mx , ptr , ip4 , ip6 , exists`). Mechanisms are evaluated from left to right and can result in a match, no match, or exception. A match returns the qualifier: + : Pass - : Fail ``: Softfail ? : Neutral If no match is found, the next mechanism is evaluated. Some mechanisms cause DNS lookups ( include , a , mx , ptr , exists ). The maximum number of DNS lookups is limited to 10. The check function should be limited in time but should allow at least 20 seconds. Exceeding the limit should result in a temperror . If no mechanism matches, the check should return \"neutral,\" which is the same as the ?all mechanism at the end. If no SPF record is found, it returns \"None,\" and a permanent error (permerror) occurs for syntax errors. Finally, it is recommended to stay within the legacy max length for DNS requests of 512 octets.","title":"1. SPF"},{"location":"docs/emailstandards/#2-dkim","text":"DKIM - DomainKeys Identified Mail was introduced in RFC4871 [@RFC4871] and updated in RFC6376 [@RFC6376]. DKIM signatures are used to sign the email header and body. It provides authenticity for the email sender and ensures that data was not modified during transit. Sending mail providers publish a TXT record of a specific format. Selectors allow multiple DKIM entries for a single domain. The receiver can verify the signature using the selector to request the associated DKIM DNS entry. The format of a DKIM signature is a tag list. Important tags are: v : Version field (currently 1) a : Signing algorithm (RFC6376 mentions SHA1 and SHA256) b : Signature data bh : Body hash d : Domain s : Selector Optional tags include: c : Canonicalization (either \"simple\" or \"relaxed\") Default is \"simple,\" which allows no modification in transit \"Relaxed\" header allows lowercase conversion of header field names and whitespace adjustments \"Relaxed\" body allows removing whitespaces at the end of lines and ignoring empty lines t : Signature timestamp (number of seconds from Jan 1, 1970 UTC) x : Signature expiration time i : Sender email address z : List of original message headers The DKIM DNS entry includes three tags: v : Version field k : Algorithm p : Public key With the right selector, the public key can be retrieved, enabling signature verification.","title":"2. DKIM"},{"location":"docs/emailstandards/#3-dmarc","text":"DMARC [@RFC7489] - Domain-based Message Authentication, Reporting, and Conformance matches the From header to an authenticated domain via SPF (MAIL FROM) or DKIM ( d= ). DMARC entries are of type TXT and have a specific format. An example DMARC entry might look like this: The first two tags are required, and others are optional: Required: v= : Version field (currently DMARC1) p= : Policy to apply in case of a mismatch (none: no action, quarantine: mark as spam, reject: reject mail during the SMTP transaction) Optional: pct= : Percentage of emails to which the policy should be applied (default 100%) adkim= : Strict/relaxed domain match for DKIM aspf= : Strict/relaxed domain match for SPF fo : Failure report options ( $<\"0\"/\"1\"/\"d\"/\"s\">$ ) rf= : Format for failure reports (default \"afrf\") ri= : Interval between aggregated reports (default 86400s = 24h) rua= : Email address for sending aggregated reports ruf= : Address for sending message-specific failure information sp= : Set a different policy (p tag options) for subdomains","title":"3. DMARC"},{"location":"docs/emailstandards/#6-dane","text":"DANE @RFC6698 - DNS-Based Authentication of Named Entities allows stating valid certificates for a domain via DNS records. This replaces the necessity for CAs as trusted third parties for TLS. Authentication of named entities is realized via TLSA records. In order to trust and guarantee the authenticity of TLSA records (to prevent MITM and DNS cache poisoning scenarios), it requires using DNSSEC-capable resolvers. To support multiple certificates for multiple applications under one domain, TLSA records follow a specific format. The numbers before the certificate association data field specify how to handle the data, what data it includes, and how it is presented. $<0-3>$ Certificate Usage provides four options on how to handle the certificate-association-data to verify the TLS server certificate: 0) Specifies CA cert., valid trust chain required ( CA constraint ) Certificate represents end-entity cert., valid trust chain required ( service cert. constraint ) Specifies CA cert., no valid trust chain required ( trust anchor assertion ) Specifies end-entity cert., no valid trust chain required ( domain-issued cert. ) $<0-1>$ TLSA Selectors specify what information is included in the certificate data: 0) Whole certificate is hashed, certificate association data has to be updated for each certificate renewal Only SubjectPublicKeyInfo is hashed, no update required if the same private key is used $<0-2>$ TLSA Matching Types specify the representation type of certificate-association-data: 0) Raw data SHA-256 hash SHA-512 hash","title":"6. DANE"},{"location":"docs/emailstandards/#7-dnssec","text":"(First introduced in 1999 with RFC2535 [@RFC2535], reworked in 2005 with RFC4033) - Provides authenticity for DNS records. Authenticity is realized by signing DNS entries. DNS entries of the same type are grouped into Resource Record Sets (RRsets). Each zone uses a private zone signing key (ZSK) to sign RRsets and publishes them as RRSIG entries. A resolver can verify the signature using the public ZSK stored in a DNSKEY DNS entry. Another layer of signing keys is introduced: key signing keys (KSK) are used to sign ZSK. Verification again uses a DNSKEY entry that contains the public KSK. From a security perspective, the KSK is like the key to your front door, while the ZSK is used for your inner doors. By using two keys, the ZSK can be changed more easily, with shorter key lengths, reducing the size of DNS responses and verification time. The next step is to provide a Delegation-Signer (DS) record, a signed hash of the KSK in the parent zone, to establish a chain of trust. This step is repeated for each domain level until the root zone is reached. Changing the KSK requires updating the entries in the parent zones.","title":"7. DNSSEC"},{"location":"docs/mikrotik/","text":"Routerboard Home Setup Requires to put your CPE/ADSL modem in bridge mode! Public IP from provider is routed to the Mikrotik Routerboard. RouterOS Version and Hardware in Use: RB750Gr3 Geizhals /system/resource/print version: 7.6 (stable) build-time: Oct/17/2022 10:55:40 factory-software: 6.46.3 free-memory: 203.9MiB total-memory: 256.0MiB cpu: MIPS 1004Kc V2.15 cpu-count: 4 cpu-frequency: 880MHz cpu-load: 0% free-hdd-space: 4480.0KiB total-hdd-space: 16.0MiB write-sect-since-reboot: 10204 write-sect-total: 13187 bad-blocks: 0% architecture-name: mmips board-name: hEX platform: MikroTik Block Diagram Initial setup 1) Reset config Power off routerboard, press reset button, power on and hold button until light flashes 2) Router will have DHCP server running on ether1 Connect with cable and get IP. ssh admin@<routerip> No password is set by default Choose options 1) Miktrotik RouterBoard Wifi => better disable it, ADSL modem is proably better or buy custom access point /interface wireless disable wlan 2) Disable Default DHCP-Server on WAN Interface (can also be changed to disable) /ip dhcp-server remove 0 3) Set Default DHCP Client on WAN interface to not take dns servers from ADSL modem /ip dhcp-client set 0 interface=ether1 use-peer-dns=yes use-peer-ntp=no add-default-route=yes disabled=no 4) Set custom DNS (to f.e. Quad9 + Allow LAN access) /ip dns set allow-remote-requests=yes servers=9.9.9.9,149.112.112.112 (Add IPv6 optional: 2620:fe::fe, 2620:fe::9) Create and setup bridge /interface bridge add name=bridge1 protocol-mode=none Interface Lists for better firewalling /interface list add name=LANclient add name=LANserver add name=LANiot add name=LAN add name=WLAN /interface list member add interface=ether2 list=LAN add interface=ether2 list=LANclient add interface=ether3 list=LAN add interface=ether3 list=LANclient add interface=ether4 list=LAN add interface=ether4 list=LANserver add interface=ether5 list=LAN add interface=ether5 list=WLAN #Default: ether2-5 belong to bridge DHCP Server Give LAN (DHCP Server) an IP /ip address add address=\"<IP addr>/24\" interface=bridge Setup DHCP for LAN bridge /ip pool add name=\"lan\" ranges=\"<range>\" /ip dhcp-server network add address=\"<addrpool>/24\" gateway=\"<routeraddr>\" netmask=\"255.255.255.0\" dns-server=\"<routeraddr>\" domain=\"intranet\" /ip dhcp-server add name=\"lan\" interface=bridge lease-time=1h address-pool=lan authoritative=yes bootp-support=none /ip dhcp-server lease enable 0 Internal DNS names /ip dns static add name=\"<gw.intranet>\" address=\"<router addr>\" ttl=1h Static DHCP leases with DNS name /ip dns static add name=\"<devicename>.intranet\" address=\"<addr>\" ttl=1h /ip dhcp-server lease add address=\"<addr>\" mac-address=\"<mac>\" comment=\"<devicename>.intranet\" server=lan Firewalling 1) Setup WAN port /ip firewall nat add action=masquerade chain=srcnat comment=\"Default masq\" out-interface=ether1 2) Setup WAN firewall /ip firewall filter add action=accept chain=input comment=\"Accept established related\" connection-state=established,related add action=accept chain=input comment=\"Allow LAN access to router and Internet\" in-interface-list=LAN #Optional: add action=accept chain=input comment=\"Allow ping ICMP from anywhere\" protocol=icmp add action=drop chain=input comment=\"Drop all other input\" add action=accept chain=forward comment=\"Accept established related\" connection-state=established,related add action=accept chain=forward comment=\"Allow LAN access to router and Internet\" connection-state=new in-interface-list=LAN add action=accept chain=forward comment=\"Accept Port forwards\" connection-nat-state=dstnat in-interface=ether1 add action=drop chain=forward comment=\"Drop all other forward\" 3) Optional: Filter outbound connections from internal devices (f.e. IoT devices) /ip firewall filter add action=drop chain=output comment=\"Block outgoing traffic from IoT-device\" src-address=<device-ip> Port Forwarding VPN (Wireguard) /ip firewall nat add chain=dstnat in-interface=ether1 dst-port=51820 action=dst-nat protocol=udp to-address=<vpn-ip> to-port=51820 Nginx Reverse Proxy /ip firewall nat add chain=dstnat in-interface=ether1 dst-port=443 action=dst-nat protocol=tcp to-address=<serveraddr> to-port=443 /ip firewall nat add chain=dstnat in-interface=ether1 dst-port=80 action=dst-nat protocol=tcp to-address=<serveraddr> to-port=80 Security Turn off unneeded helpers /ip firewall service-port set ftp disabled=yes set tftp disabled=yes set irc disabled=yes set h323 disabled=yes set sip disabled=yes set pptp disabled=yes set udplite disabled=yes set dccp disabled=yes set sctp disabled=yes Turn off unneeded services || VERIFY if above steps worked, otherwise it might get complicated to connect to SSH service from wrong IP range This also disables the GUI (avoid disabling winbox, www) if needed! /ip service set telnet disabled=yes set ftp disabled=yes set api disabled=yes set ssh address=192.168.1.0/24 set winbox disabled=yes set api-ssl disabled=yes set www disabled=yes set www-ssl disabled=yes Misc IP settings /ip ssh set strong-crypto=yes /ip settings set rp-filter=no secure-redirects=yes send-redirects=yes tcp-syncookies=no Remove/disable default ip at last /ip address remove 0 SSH Access with ssh-keys ```shell script ssh-keygen -t rsa -b 4096 -m 'PEM' Mikrotik only accepts PEM formatted keys (you can convert your key like this:) ssh-keygen -f ~/.ssh/id_rsa.pub -e -m 'PEM' >> ~/.ssh/id_rsa.pub.pem Copy the pubkey to persistent storage on the routerboard (flash/id_rsa.pub.pem) On the router: user ssh-keys import public-key-file=\"flash/id_rsa.pub.pem\" user= ### Graphs Per default resource graph for CPU, Memory and Disk usage is collected every 5 minutes. The graph can be accessed under: http://<i>RouterIP</i>/graphs /ip service set www disabled=no /tool graphing resource add allow-address \"192.168.1.0/24\" /tool graphing resource add disabled=no <b>Custom data retrieval</b> bash script.sh <i>username</i> <i>router IP</i> <br> Description: Creates a single ssh connection to the router (ssh-keys recommended first), runs multiple commands every 0.5 seconds, outputs it to stdout <br> Optional: redirect output to log file `>> router-stats.log` ```shell script # # Persistent SSH Connection accross multiple commands # user=$1 target=$2 host=\"$user@$target\" tmp_dir=$(mktemp -d \"/tmp/$(basename \"$0\").XXXXXX\") ssh_control_socket=\"$tmp_dir/ssh_control_socket\" # Setup control master echo $(date)\": Initiating SSH Master socket to $host\" ssh -f -N -o 'ControlMaster=yes' -S $ssh_control_socket $host remote_cmd=\"ssh -o LogLevel=QUIET -S $ssh_control_socket $host\" while true; do #Retrieve Number of IPv6 Neighbor discovery cache entries entries=$($remote_cmd /ipv6 neighbor/ print) echo \"$entries\" | cut -d \" \" -f1 | grep -v -e '^[[:space:]]*$' | tail -n 1 #Retrieve CPU Usage cpu=$($remote_cmd :put [/system resource get \"cpu-load\"]) #$($remote_cmd /system resource cpu print) echo \"$cpu\" #Retrieve free RAM ram=$($remote_cmd :put [/system resource get \"free-memory\"]) echo \"$ram\" #Retrieve free HDD Space hdd=$($remote_cmd :put [/system resource get \"free-hdd-space\"]) echo \"$hdd\" echo \"---\" sleep 0.5 done #Close Connection echo $(date)\": Exiting SSH Master socket to $host\" ssh -S \"$ssh_control_socket\" -O check $host ssh -S \"$ssh_control_socket\" -O exit $host","title":"Routerboard Home Setup"},{"location":"docs/mikrotik/#routerboard-home-setup","text":"Requires to put your CPE/ADSL modem in bridge mode! Public IP from provider is routed to the Mikrotik Routerboard. RouterOS Version and Hardware in Use: RB750Gr3 Geizhals /system/resource/print version: 7.6 (stable) build-time: Oct/17/2022 10:55:40 factory-software: 6.46.3 free-memory: 203.9MiB total-memory: 256.0MiB cpu: MIPS 1004Kc V2.15 cpu-count: 4 cpu-frequency: 880MHz cpu-load: 0% free-hdd-space: 4480.0KiB total-hdd-space: 16.0MiB write-sect-since-reboot: 10204 write-sect-total: 13187 bad-blocks: 0% architecture-name: mmips board-name: hEX platform: MikroTik","title":"Routerboard Home Setup"},{"location":"docs/mikrotik/#block-diagram","text":"","title":"Block Diagram"},{"location":"docs/mikrotik/#initial-setup","text":"1) Reset config Power off routerboard, press reset button, power on and hold button until light flashes 2) Router will have DHCP server running on ether1 Connect with cable and get IP. ssh admin@<routerip> No password is set by default","title":"Initial setup"},{"location":"docs/mikrotik/#choose-options","text":"1) Miktrotik RouterBoard Wifi => better disable it, ADSL modem is proably better or buy custom access point /interface wireless disable wlan 2) Disable Default DHCP-Server on WAN Interface (can also be changed to disable) /ip dhcp-server remove 0 3) Set Default DHCP Client on WAN interface to not take dns servers from ADSL modem /ip dhcp-client set 0 interface=ether1 use-peer-dns=yes use-peer-ntp=no add-default-route=yes disabled=no 4) Set custom DNS (to f.e. Quad9 + Allow LAN access) /ip dns set allow-remote-requests=yes servers=9.9.9.9,149.112.112.112 (Add IPv6 optional: 2620:fe::fe, 2620:fe::9)","title":"Choose options"},{"location":"docs/mikrotik/#create-and-setup-bridge","text":"/interface bridge add name=bridge1 protocol-mode=none Interface Lists for better firewalling /interface list add name=LANclient add name=LANserver add name=LANiot add name=LAN add name=WLAN /interface list member add interface=ether2 list=LAN add interface=ether2 list=LANclient add interface=ether3 list=LAN add interface=ether3 list=LANclient add interface=ether4 list=LAN add interface=ether4 list=LANserver add interface=ether5 list=LAN add interface=ether5 list=WLAN #Default: ether2-5 belong to bridge","title":"Create and setup bridge"},{"location":"docs/mikrotik/#dhcp-server","text":"Give LAN (DHCP Server) an IP /ip address add address=\"<IP addr>/24\" interface=bridge Setup DHCP for LAN bridge /ip pool add name=\"lan\" ranges=\"<range>\" /ip dhcp-server network add address=\"<addrpool>/24\" gateway=\"<routeraddr>\" netmask=\"255.255.255.0\" dns-server=\"<routeraddr>\" domain=\"intranet\" /ip dhcp-server add name=\"lan\" interface=bridge lease-time=1h address-pool=lan authoritative=yes bootp-support=none /ip dhcp-server lease enable 0 Internal DNS names /ip dns static add name=\"<gw.intranet>\" address=\"<router addr>\" ttl=1h Static DHCP leases with DNS name /ip dns static add name=\"<devicename>.intranet\" address=\"<addr>\" ttl=1h /ip dhcp-server lease add address=\"<addr>\" mac-address=\"<mac>\" comment=\"<devicename>.intranet\" server=lan","title":"DHCP Server"},{"location":"docs/mikrotik/#firewalling","text":"1) Setup WAN port /ip firewall nat add action=masquerade chain=srcnat comment=\"Default masq\" out-interface=ether1 2) Setup WAN firewall /ip firewall filter add action=accept chain=input comment=\"Accept established related\" connection-state=established,related add action=accept chain=input comment=\"Allow LAN access to router and Internet\" in-interface-list=LAN #Optional: add action=accept chain=input comment=\"Allow ping ICMP from anywhere\" protocol=icmp add action=drop chain=input comment=\"Drop all other input\" add action=accept chain=forward comment=\"Accept established related\" connection-state=established,related add action=accept chain=forward comment=\"Allow LAN access to router and Internet\" connection-state=new in-interface-list=LAN add action=accept chain=forward comment=\"Accept Port forwards\" connection-nat-state=dstnat in-interface=ether1 add action=drop chain=forward comment=\"Drop all other forward\" 3) Optional: Filter outbound connections from internal devices (f.e. IoT devices) /ip firewall filter add action=drop chain=output comment=\"Block outgoing traffic from IoT-device\" src-address=<device-ip>","title":"Firewalling"},{"location":"docs/mikrotik/#port-forwarding","text":"VPN (Wireguard) /ip firewall nat add chain=dstnat in-interface=ether1 dst-port=51820 action=dst-nat protocol=udp to-address=<vpn-ip> to-port=51820 Nginx Reverse Proxy /ip firewall nat add chain=dstnat in-interface=ether1 dst-port=443 action=dst-nat protocol=tcp to-address=<serveraddr> to-port=443 /ip firewall nat add chain=dstnat in-interface=ether1 dst-port=80 action=dst-nat protocol=tcp to-address=<serveraddr> to-port=80","title":"Port Forwarding"},{"location":"docs/mikrotik/#security","text":"Turn off unneeded helpers /ip firewall service-port set ftp disabled=yes set tftp disabled=yes set irc disabled=yes set h323 disabled=yes set sip disabled=yes set pptp disabled=yes set udplite disabled=yes set dccp disabled=yes set sctp disabled=yes Turn off unneeded services || VERIFY if above steps worked, otherwise it might get complicated to connect to SSH service from wrong IP range This also disables the GUI (avoid disabling winbox, www) if needed! /ip service set telnet disabled=yes set ftp disabled=yes set api disabled=yes set ssh address=192.168.1.0/24 set winbox disabled=yes set api-ssl disabled=yes set www disabled=yes set www-ssl disabled=yes Misc IP settings /ip ssh set strong-crypto=yes /ip settings set rp-filter=no secure-redirects=yes send-redirects=yes tcp-syncookies=no Remove/disable default ip at last /ip address remove 0 SSH Access with ssh-keys ```shell script ssh-keygen -t rsa -b 4096 -m 'PEM'","title":"Security"},{"location":"docs/mikrotik/#mikrotik-only-accepts-pem-formatted-keys-you-can-convert-your-key-like-this","text":"ssh-keygen -f ~/.ssh/id_rsa.pub -e -m 'PEM' >> ~/.ssh/id_rsa.pub.pem Copy the pubkey to persistent storage on the routerboard (flash/id_rsa.pub.pem) On the router: user ssh-keys import public-key-file=\"flash/id_rsa.pub.pem\" user= ### Graphs Per default resource graph for CPU, Memory and Disk usage is collected every 5 minutes. The graph can be accessed under: http://<i>RouterIP</i>/graphs /ip service set www disabled=no /tool graphing resource add allow-address \"192.168.1.0/24\" /tool graphing resource add disabled=no <b>Custom data retrieval</b> bash script.sh <i>username</i> <i>router IP</i> <br> Description: Creates a single ssh connection to the router (ssh-keys recommended first), runs multiple commands every 0.5 seconds, outputs it to stdout <br> Optional: redirect output to log file `>> router-stats.log` ```shell script # # Persistent SSH Connection accross multiple commands # user=$1 target=$2 host=\"$user@$target\" tmp_dir=$(mktemp -d \"/tmp/$(basename \"$0\").XXXXXX\") ssh_control_socket=\"$tmp_dir/ssh_control_socket\" # Setup control master echo $(date)\": Initiating SSH Master socket to $host\" ssh -f -N -o 'ControlMaster=yes' -S $ssh_control_socket $host remote_cmd=\"ssh -o LogLevel=QUIET -S $ssh_control_socket $host\" while true; do #Retrieve Number of IPv6 Neighbor discovery cache entries entries=$($remote_cmd /ipv6 neighbor/ print) echo \"$entries\" | cut -d \" \" -f1 | grep -v -e '^[[:space:]]*$' | tail -n 1 #Retrieve CPU Usage cpu=$($remote_cmd :put [/system resource get \"cpu-load\"]) #$($remote_cmd /system resource cpu print) echo \"$cpu\" #Retrieve free RAM ram=$($remote_cmd :put [/system resource get \"free-memory\"]) echo \"$ram\" #Retrieve free HDD Space hdd=$($remote_cmd :put [/system resource get \"free-hdd-space\"]) echo \"$hdd\" echo \"---\" sleep 0.5 done #Close Connection echo $(date)\": Exiting SSH Master socket to $host\" ssh -S \"$ssh_control_socket\" -O check $host ssh -S \"$ssh_control_socket\" -O exit $host","title":"Mikrotik only accepts PEM formatted keys (you can convert your key like this:)"},{"location":"docs/storage/","text":"Unraid Parity Unraid relies on 'even parity' for disk failure protection. Unraid stores the parity bits on a dedicated parity disk. The advantage of it: Unraid needs only one parity disk, independent of how many disks you have in your storage array. The only requirement is that the parity disk is equal or larger in size than the largest disk in the array. The disadvantage: Only one disk is allowed to fail (in default mode). How does this work? Parity is calculated as even parity: SUM of disk bits must be even. Disk1 Disk2 Disk3 Disk4 Parity Bit 0 1 0 1 1 1 Bit 1 0 0 1 1 0 In case Disk 1 fails: Disk1 Disk2 Disk3 Disk4 Parity Bit 0 x1 0 1 1 1 Bit 1 x2 0 1 1 0 Reconstructing Disk1: x1: x + 0 + 1 + 1 + 1 = even, x1 must be 1 x2: x + 0 + 1 + 1 + 0 = even, x2 must be 0 Unraid also allows dual parity - two parity disks - that protects against any two disk failures. Change parity disk? 1. Stop the array 2. Unassign the old parity disk 3. Assign the new parity disk 4. Start the array! Transfer data from external drives to Unraid Goal: Data in one central deduplicated place, protected from disk failures. To mount external drives without assigning them to the array the Unassigned Devices App is necessary. With this App we also install Unassigned Devices Preclear to have tmux available on the Unraid server. Once Unassigned Devices is installed the USB-connected external drive will show up in the Main tab. By mounting it, it will be available under mnt/disks/ . We can simply open a terminal in that location and preprocess folders before transferring them to the array. For example folders with large amounts of subfolders can be reduced to a single archive with tar, xz or zip. tar cf archive.tar folder (optional to also compress - T0 for multithreading: tar -c -I 'xz -T0' -f archive.tar.xz) zip (-e for password protected archives) -r (recursive) <archive_name>.zip folder1 folder2 file3 Once the data from the external drive is preprocessed, files can be transferred with the Midnight Commander by executing mc in the terminal.","title":"Unraid"},{"location":"docs/storage/#unraid","text":"","title":"Unraid"},{"location":"docs/storage/#parity","text":"Unraid relies on 'even parity' for disk failure protection. Unraid stores the parity bits on a dedicated parity disk. The advantage of it: Unraid needs only one parity disk, independent of how many disks you have in your storage array. The only requirement is that the parity disk is equal or larger in size than the largest disk in the array. The disadvantage: Only one disk is allowed to fail (in default mode). How does this work? Parity is calculated as even parity: SUM of disk bits must be even. Disk1 Disk2 Disk3 Disk4 Parity Bit 0 1 0 1 1 1 Bit 1 0 0 1 1 0 In case Disk 1 fails: Disk1 Disk2 Disk3 Disk4 Parity Bit 0 x1 0 1 1 1 Bit 1 x2 0 1 1 0 Reconstructing Disk1: x1: x + 0 + 1 + 1 + 1 = even, x1 must be 1 x2: x + 0 + 1 + 1 + 0 = even, x2 must be 0 Unraid also allows dual parity - two parity disks - that protects against any two disk failures. Change parity disk? 1. Stop the array 2. Unassign the old parity disk 3. Assign the new parity disk 4. Start the array!","title":"Parity"},{"location":"docs/storage/#transfer-data-from-external-drives-to-unraid","text":"Goal: Data in one central deduplicated place, protected from disk failures. To mount external drives without assigning them to the array the Unassigned Devices App is necessary. With this App we also install Unassigned Devices Preclear to have tmux available on the Unraid server. Once Unassigned Devices is installed the USB-connected external drive will show up in the Main tab. By mounting it, it will be available under mnt/disks/ . We can simply open a terminal in that location and preprocess folders before transferring them to the array. For example folders with large amounts of subfolders can be reduced to a single archive with tar, xz or zip. tar cf archive.tar folder (optional to also compress - T0 for multithreading: tar -c -I 'xz -T0' -f archive.tar.xz) zip (-e for password protected archives) -r (recursive) <archive_name>.zip folder1 folder2 file3 Once the data from the external drive is preprocessed, files can be transferred with the Midnight Commander by executing mc in the terminal.","title":"Transfer data from external drives to Unraid"}]}